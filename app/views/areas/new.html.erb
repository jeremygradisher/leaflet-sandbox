<%- model_class = Area -%>
<div class="page-header">
  <h1><%=t '.title', :default => [:'helpers.titles.new', 'New %{model}'], :model => model_class.model_name.human.titleize %></h1>
</div>




<div id='map' style="height:500px;"></div>


<script>
	//A Leaflet map has one CRS (and one CRS only)
	var map = L.map('map', {
		crs: L.CRS.Simple, 
		minZoom: -3
	});

	//If working with [y, x] coordinates with something named L.LatLng doesn’t make much sense to you, 
	//you can easily create wrappers for them:
	var yx = L.latLng;

	var xy = function(x, y) {
		if (L.Util.isArray(x)) {    // When doing xy([x, y]);
			return yx(x[1], x[0]);
		}
		return yx(y, x);  // When doing xy(x, y);
	};

	//add a L.ImageOverlay with the map image and its approximate bounds:
	//Think in map units in a grid, and then add your layers (L.ImageOverlays, L.Markers and so on) accordingly.
	var bounds = [xy(0,0), xy(<%= @image.width %>,<%= @image.height %>)];
	
	var image = L.imageOverlay('<%= @image.image_url %>', bounds).addTo(map);

	//add some markers
	//var suite401      = yx(604, 107);

	//L.marker(suite401).addTo(map).bindPopup('Suite 401');

	//map.setView(xy(120, 70), 1);
    map.fitBounds(bounds);

    var popup = L.popup();
    
    var marker = null;
    
    function onMapClick(e) {
    	if (marker !== null) {
        map.removeLayer(marker);
    	}
        marker = L.marker(e.latlng, {icon: lblueIcon, draggable: true}).addTo(map);
       	document.getElementById('area_coords').value = e.latlng.lat + ', ' + e.latlng.lng;
		marker.setLatLng(e.latlng);
		updateLatLng(marker.getLatLng().lat, marker.getLatLng().lng);
		function updateLatLng(lat,lng) {
		document.getElementById('area_coords').value = e.latlng.lat + ', ' + e.latlng.lng;
		//map.panTo([lat,lng]);
		}
		function onDragend(e) {
    	document.getElementById('area_coords').value = marker.getLatLng().lat + ', ' + marker.getLatLng().lng;
		}
    	marker.on('dragend', onDragend);
    }
    
    map.on('click', onMapClick);
</script>

<script>
	//Let’s define our own icon class containing the shared options, 
    //inheriting from L.Icon! It’s really easy in Leaflet:
    var mapIcon = L.Icon.extend({
			options: {
				shadowUrl: '/images/marker-shadow.png',
				iconSize:     [30, 45], // size of the icon
                shadowSize:   [41, 41], // size of the shadow
                iconAnchor:   [15, 43], // point of the icon which will correspond to marker's location
                shadowAnchor: [12, 38],  // the same for the shadow
                popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor
			}
		});

    //Now we can create all three of our leaf icons from this class and use them:
    var greenIcon = new mapIcon({iconUrl: '/images/green-marker.png'}),
    redIcon = new mapIcon({iconUrl: '/images/red-marker.png'}),
    orangeIcon = new mapIcon({iconUrl: '/images/orange-marker.png'}),
    blueIcon = new mapIcon({iconUrl: '/images/blue-marker.png'}),
    lblueIcon = new mapIcon({iconUrl: '/images/lblue-marker.png'}),
    blackIcon = new mapIcon({iconUrl: '/images/black-marker.png'}),
    yellowIcon = new mapIcon({iconUrl: '/images/yellow-marker.png'});
</script>

<hr style="clear:both;">



<%= render :partial => 'newform' %>

